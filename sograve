#include <EEPROM.h>

#include <Servo.h>

#include <AFMotor.h>

// DECLARAÇÕES
// Número de passos por revolução do motor de passo
const int stepsPerRevolution = 200;

// Instância da biblioteca Stepper
AF_Stepper motor(stepsPerRevolution, 2);

// Pinos de conexao do modulo TCS230 de cores 
const int s0 = 22;
const int s1 = 24;
const int s2 = 26;
const int s3 = 28;
const int out = 30;

// Variaveis que armazenam o valor das cores  
int red = 0;
int green = 0;
int blue = 0;

int cor = 1;

// Pino do interruptor
const int IbarraO = 33;

// Matriz de movimento x e y
int atualAngX = 60;
int atualAngY = 120;
int novaAngX = 0;
int novaAngY = 0;

int velocidade_xy = 30;

// Controle eixo Z
int atualPosZ = 0;
int novaPosZ = 0;

bool sentidoZ = 0;
int velocidade_z_rpm = 320;

// Definição dos servo motores
Servo servomotorelo1;
Servo servomotorelo2;
const int pinoServoMotorElo1 = 10;
const int pinoServoMotorElo2 = 9;

// Definição do servo motor da garra
Servo servomotorgarra;
const int pinoServoMotorGarra = 32;
int posicaoServoMotorGarra = 0;

// FUNÇÕES
// Função para movimentar o motor de passo do eixo Z
// em um determinado número de pulsos
void move_motorpasso(int pulsos) {
    // motor de passo usando driver

    // sentido horario
    if (sentidoZ == 0) {
        Serial.println("Subindo...");
        motor.step(stepsPerRevolution * pulsos, BACKWARD, MICROSTEP);
    }
    // sentido anti-horario
    else {
        Serial.println("Descendo...");
        motor.step(stepsPerRevolution * pulsos, FORWARD, MICROSTEP);
    }
    delayMicroseconds(500);
}

//Rotina que le o valor das cores  
void color() {
    digitalWrite(s2, LOW);
    digitalWrite(s3, LOW);
    //count OUT, pRed, RED  
    red = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);
    Serial.println(String(digitalRead(s2)) + " | " + String(digitalRead(s3)) + " | " + String(red));

    digitalWrite(s3, HIGH);
    //count OUT, pBLUE, BLUE  
    blue = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);
    Serial.println(String(digitalRead(s2)) + " | " + String(digitalRead(s3)) + " | " + String(blue));
    digitalWrite(s2, HIGH);
    //count OUT, pGreen, GREEN  
    green = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);
    Serial.println(String(digitalRead(s2)) + " | " + String(digitalRead(s3)) + " | " + String(green));
}

// Função que lê o sensor de cores, modulo TCS230
int detecta_cores() {
    int retorno = 0;
    Serial.println("Detectando cor...");
    while (retorno == 0 && /*digitalRead(IbarraO)*/ HIGH == HIGH) {
        color(); //Chama a rotina que le as cores  
        //Mostra no serial monitor os valores detectados  
        Serial.print("Vermelho :");
        Serial.print(red, DEC);
        Serial.print(" Verde : ");
        Serial.print(green, DEC);
        Serial.print(" Azul : ");
        Serial.print(blue, DEC);
        Serial.println();
        //Verifica se a cor vermelha foi detectada  
        if (red < blue && red < green && red < 100) {
            Serial.println("Vermelho");
            retorno = 1;
        }
        //Verifica se a cor azul foi detectada  
        else if (blue < red && blue < green) {
            Serial.println("Azul");
            retorno = 2;
        }
        //Verifica se a cor verde foi detectada  
        else if (green < red && green < blue) {
            Serial.println("Verde");
            retorno = 0;
        }
        Serial.println();
        //Aguarda 2 segundos, apaga os leds e reinicia o processo  
        delay(2000);
    }
    return retorno;
    Serial.println("Saindo da deteccao de cor...");
}

// Função que calcula a quantidade de passos
// que o motor de passo do eixo Z deve dar
int sistema_z(int diff_z) {
    float passos_mm = 16; // passos que o servo tem que dar por milimetro

    // determinar quantidade de passos
    return diff_z * passos_mm;
}

// Função para movimentar todos os eixos para uma
// determinada posição x, y e z tendo como base a posição atual (antiga)
void lidando_com_x_y(int x, int y, int z) {
    Serial.println("Movendo garra para a posição: " + String(x) + ", " + String(y) + ", " + String(z));

    novaAngX = x;
    novaAngY = y;

    Serial.println("Ângulos definidos.");

    // nova posição do eixo Z
    novaPosZ = z;
    int quantPassosZ = sistema_z(abs(z - atualPosZ));

    if (novaPosZ < atualPosZ) {
        sentidoZ = 1;
        Serial.println("Desce.");
    } else if (novaPosZ > atualPosZ) {
        sentidoZ = 0;
        Serial.println("Sobe.");
    }

    // se a nova posição do eixo Z for maior
    if (novaPosZ > atualPosZ) {
        Serial.println("Movendo motor de passo.");
        move_motorpasso(abs(quantPassosZ));
    }
    Serial.println("Movendo motores servo grandes.");
    // movimentação eixo x e y
    if (novaAngX > atualAngX) {
        Serial.println("Movendo servo 1 de " + String(atualAngX) + " para " + String(novaAngX) + " na velocidade " + String(velocidade_xy) + ".");
        for (int i = atualAngX; i < novaAngX; i++) {
            servomotorelo1.write(i);
            delay(velocidade_xy);
        }
        Serial.println("Servo 1 movido.");
    } else if (novaAngX < atualAngX) {
        Serial.println("Movendo servo 1 de " + String(atualAngX) + " para " + String(novaAngX) + " na velocidade " + String(velocidade_xy) + ".");
        for (int i = atualAngX; i > novaAngX; i--) {
            servomotorelo1.write(i);
            delay(velocidade_xy);
        }
        Serial.println("Servo 1 movido.");
    }
    if (novaAngY > atualAngY) {
        Serial.println("Movendo servo 2 de " + String(atualAngY) + " para " + String(novaAngY) + " na velocidade " + String(velocidade_xy) + ".");
        for (int i = atualAngY; i < novaAngY; i++) {
            servomotorelo2.write(i);
            delay(velocidade_xy);
        }
        Serial.println("Servo 2 movido.");
    } else if (novaAngY < atualAngY) {
        Serial.println("Movendo servo 2 de " + String(atualAngY) + " para " + String(novaAngY) + " na velocidade " + String(velocidade_xy) + ".");
        for (int i = atualAngY; i > novaAngY; i--) {
            servomotorelo2.write(i);
            delay(velocidade_xy);
        }
        Serial.println("Servo 2 movido.");
    }

    // se a nova posição do eixo Z for menor
    if (novaPosZ < atualPosZ) {
        Serial.println("Movendo motor de passo.");
        move_motorpasso(abs(quantPassosZ));
    }
    Serial.println("Movimento concluído.");

    // Informa na serial em uma linha só
    Serial.print("X: de " + String(atualAngX) + " para " + String(novaAngX) + " | Y: de " + String(atualAngY) + " para " + String(novaAngY));
    Serial.println();

    // Atualiza os valores antigos
    atualAngX = novaAngX;
    atualAngY = novaAngY;
    atualPosZ = novaPosZ;
}

void garra(int abreoufecha) {
    if (abreoufecha == 1) {
        for (int i = 60; i > 10; i--) {
            servomotorgarra.write(i);
            delay(10);
        }
        Serial.println("Garra aberta.");
    } else if (abreoufecha == 0) {
        for (int i = 10; i < 60; i++) {
            servomotorgarra.write(i);
            delay(10);
        }
        Serial.println("Garra fechada.");
    }
}

void setup() {
    // Define os pinos como saída
    pinMode(s0, OUTPUT);
    pinMode(s1, OUTPUT);
    pinMode(s2, OUTPUT);
    pinMode(s3, OUTPUT);
    pinMode(out, INPUT);

    digitalWrite(s0, HIGH);
    digitalWrite(s1, LOW);

    // Inicia a comunicação serial
    Serial.begin(9600);

    motor.setSpeed(velocidade_z_rpm); // RPM

    // Inicia os servos motores maiores
    servomotorelo1.attach(pinoServoMotorElo1);
    servomotorelo1.write(atualAngX);
    servomotorelo2.attach(pinoServoMotorElo2);
    servomotorelo2.write(atualAngY);
    servomotorgarra.attach(pinoServoMotorGarra);

    Serial.println("Setup concluido.");

    servomotorgarra.write(10);
}

void loop() {
    // funciona se o interruptor está ligado
    // se detecta azul ou vermelho, ele executa o motor
    // manda o motor pegar a peça na área do sensor e levar para um destino
    // os destinos são diferentes para as duas cores
    // sobe o motor e volta para o ponto inicial
    Serial.println("Loop iniciado.");
    
    // se o interruptor estiver ligado
    if ( digitalRead(IbarraO) == HIGH) {
      lidando_com_x_y(90, 90, 200);
        // se detectar azul ou vermelho
        if (cor==1){
          cor = 2;
        } else if (cor == 2) {
          cor=1;
        }
        Serial.println("Detecção de cor: " + String(cor));
        if (cor != 0 || digitalRead(IbarraO) == HIGH) {
            Serial.println("Uma cor foi detectada.");
            Serial.println("==============\nINDO ATÉ O SENSOR");
            // sobe o braço
            lidando_com_x_y(90, 90, 200);
            Serial.println("Braço em um ponto neutro.");
            // abre a garra
            garra(1);
            // leva o braço até o ponto do sensor
            lidando_com_x_y(90, 90, 0);delay(1000);
            // fecha a garra
            garra(0);
            lidando_com_x_y(90, 90, 200);
            // leva o braço até o ponto de destino
            Serial.println("==============\nINDO ATÉ O DESTINO");
            if (cor == 2) {
                lidando_com_x_y(45, 45, 0);
                garra(0);
                Serial.println("Peça azul jogada na caixa.");
            } else if (cor == 1) {
                lidando_com_x_y(150, 130, 0);
                garra(0);
                Serial.println("Peça vermelha jogada na caixa.");
            }
            // abre a garra
            garra(1);
            delay(1000);
            lidando_com_x_y(90, 90, 200);
            lidando_com_x_y(80, 100, 200);
            lidando_com_x_y(90, 90, 200);
            Serial.println("==============\nVOLTANDO PARA O PONTO INICIAL");
            Serial.println("Ciclo concluído.");
        }
    }
}